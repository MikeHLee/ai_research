AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for NL-SQL-NL RAG Engine infrastructure'

Parameters:
  ProjectName:
    Type: String
    Default: nl-sql-rag
    Description: Name of the project
  
  SnowflakeAccount:
    Type: String
    Description: Snowflake account identifier
  
  SnowflakeUser:
    Type: String
    Description: Snowflake username
  
  SnowflakePassword:
    Type: String
    NoEcho: true
    Description: Snowflake password
  
  SnowflakeDatabase:
    Type: String
    Description: Snowflake database name
  
  SnowflakeSchema:
    Type: String
    Description: Snowflake schema name
  
  SnowflakeWarehouse:
    Type: String
    Description: Snowflake warehouse name

Resources:
  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonBedrockFullAccess'
      Policies:
        - PolicyName: LambdaSecretsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Ref SnowflakeCredentialsSecret

  # Secrets Manager for Snowflake credentials
  SnowflakeCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ProjectName}-snowflake-credentials'
      Description: 'Snowflake credentials for NL-SQL-NL RAG Engine'
      SecretString: !Sub |
        {
          "account": "${SnowflakeAccount}",
          "user": "${SnowflakeUser}",
          "password": "${SnowflakePassword}",
          "database": "${SnowflakeDatabase}",
          "schema": "${SnowflakeSchema}",
          "warehouse": "${SnowflakeWarehouse}"
        }

  # Lambda Layer for common dependencies
  DependenciesLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub '${ProjectName}-dependencies'
      Description: 'Common dependencies for NL-SQL-NL RAG Engine'
      CompatibleRuntimes:
        - python3.9
      Content:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: 'layers/dependencies.zip'

  # S3 Bucket for Lambda code and layers
  LambdaCodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-lambda-code-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled

  # Lambda function for processing natural language queries
  QueryProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-query-processor'
      Description: 'Processes natural language queries and converts them to SQL'
      Runtime: python3.9
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      MemorySize: 1024
      Layers:
        - !Ref DependenciesLayer
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: 'functions/query_processor.zip'
      Environment:
        Variables:
          SNOWFLAKE_CREDENTIALS_SECRET: !Ref SnowflakeCredentialsSecret
          USE_BEDROCK: 'true'
          MODEL_ID: 'anthropic.claude-3-sonnet-20240229-v1:0'
          TEMPERATURE: '0.0'

  # API Gateway REST API
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-api'
      Description: 'API for NL-SQL-NL RAG Engine'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource for query endpoint
  QueryResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'query'

  # API Gateway Method for query endpoint
  QueryMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref QueryResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QueryProcessorFunction.Arn}/invocations'

  # Lambda Permission for API Gateway
  QueryProcessorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref QueryProcessorFunction
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/query'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - QueryMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: 'prod'

  # Lambda function for web interface
  WebInterfaceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-web-interface'
      Description: 'Web interface for NL-SQL-NL RAG Engine'
      Runtime: python3.9
      Handler: lambda_app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 512
      Layers:
        - !Ref DependenciesLayer
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: 'functions/web_interface.zip'
      Environment:
        Variables:
          API_ENDPOINT: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/query'

  # API Gateway Resource for web interface
  WebInterfaceResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'web'

  # API Gateway Method for web interface
  WebInterfaceMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref WebInterfaceResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebInterfaceFunction.Arn}/invocations'

  # Lambda Permission for Web Interface API Gateway
  WebInterfacePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref WebInterfaceFunction
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/web'

Outputs:
  ApiEndpoint:
    Description: 'API Gateway endpoint URL for prod stage'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/'

  WebInterfaceURL:
    Description: 'URL for the web interface'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/web'
